trigger: none

pr:
  autoCancel: true # indicates whether additional pushes to a PR should cancel in-progress runs for the same PR. Defaults to true
  branches:
    include:  # branch names which will trigger a build
    - main
    - release/*

name: $(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)

variables:
- template: variables/nuget.yml
- name: configuration
  value: Release

stages:
- stage: Windows_2022
  displayName: Windows 2022
  jobs:
  - job: default
    displayName: default
    timeoutInMinutes: 60
    pool:
      vmImage: windows-2022
    steps:
      - template: templates/install-dotnet.yaml
      - template: templates/install-nuget.yaml
      - template: templates/restore-nuget-packages.yaml
      - task: VSBuild@1
        displayName: 'build'
        inputs:
          solution: 'DotNetty.sln'
          configuration: '$(configuration)'
          maximumCpuCount: true
      - task: VSTest@2
        displayName: 'test (net472)'
        inputs:
          testSelector: 'testAssemblies'
          testAssemblyVer2: |
            test\*.Tests\bin\$(configuration)\net4*\**\*.Tests.dll
            !test\DotNetty.Suite.Tests\bin\$(configuration)\net4*\**\*.Tests.dll
            !test\DotNetty.Buffers.ReaderWriter.Tests\bin\$(configuration)\net4*\**\*.Tests.dll
          resultsFolder: '$(Build.SourcesDirectory)\TestResults'
          testRunTitle: 'test (net472)'
          configuration: '$(configuration)'
          publishRunAttachments: true
          #runSettingsFile: '$(Build.SourcesDirectory)\cit.runsettings'
          #runInParallel: true
          #codeCoverageEnabled: true
          #failOnMinTestsNotRun: true
          #rerunFailedTests: true
      - task: VSTest@2
        displayName: 'test (net6.0)'
        inputs:
          testSelector: 'testAssemblies'
          testAssemblyVer2: |
            test\*.Tests\bin\$(configuration)\net6.0\**\*.Tests.dll
            !test\DotNetty.Transport.Tests\bin\$(configuration)\net6.0\**\*.Tests.dll
            !test\DotNetty.Suite.Tests\bin\$(configuration)\net6.0\**\*.Tests.dll
            !test\DotNetty.Handlers.Proxy.Tests\bin\$(configuration)\net6.0\**\*.Tests.dll
          resultsFolder: '$(Build.SourcesDirectory)\TestResults'
          testRunTitle: 'test (net6.0)'
          configuration: '$(configuration)'
          publishRunAttachments: true
      - task: VSTest@2
        displayName: 'test (net8.0)'
        inputs:
          testSelector: 'testAssemblies'
          testAssemblyVer2: |
            test\*.Tests\bin\$(configuration)\net8.0\**\*.Tests.dll
            !test\DotNetty.Transport.Tests\bin\$(configuration)\net8.0\**\*.Tests.dll
            !test\DotNetty.Suite.Tests\bin\$(configuration)\net8.0\**\*.Tests.dll
            !test\DotNetty.Handlers.Proxy.Tests\bin\$(configuration)\net8.0\**\*.Tests.dll
          resultsFolder: '$(Build.SourcesDirectory)\TestResults'
          testRunTitle: 'test (net8.0)'
          configuration: '$(configuration)'
          publishRunAttachments: true 
      - task: VSTest@2
        displayName: 'test (net9.0)'
        inputs:
          testSelector: 'testAssemblies'
          testAssemblyVer2: |
            test\*.Tests\bin\$(configuration)\net9.0\**\*.Tests.dll
            !test\DotNetty.Transport.Tests\bin\$(configuration)\net9.0\**\*.Tests.dll
            !test\DotNetty.Suite.Tests\bin\$(configuration)\net9.0\**\*.Tests.dll
            !test\DotNetty.Handlers.Proxy.Tests\bin\$(configuration)\net9.0\**\*.Tests.dll
          resultsFolder: '$(Build.SourcesDirectory)\TestResults'
          testRunTitle: 'test (net9.0)'
          configuration: '$(configuration)'
          publishRunAttachments: true                     
- stage: Ubuntu_22
  displayName: Ubuntu 22
  dependsOn: []
  jobs:
  - job: default
    displayName: 'default'
    timeoutInMinutes: 60
    pool:
      vmImage: 'ubuntu-22.04'
    steps:
      - template: templates/install-dotnet.yaml
      - template: templates/install-nuget.yaml
      - template: templates/restore-nuget-packages.yaml
      - task: DotNetCoreCLI@2
        displayName: build
        inputs:
          command: 'build'
          projects: 'DotNetty.sln'
          configuration: $(configuration)
          arguments: '-m'
          #maximumCpuCount: true          

    # - task: VSTest@2
    #   displayName: 'test (net6)'
    #   inputs:
    #     testSelector: 'testAssemblies'
    #     testAssemblyVer2: |
    #       Proxy\test\**\bin\$(buildConfiguration)\net6*\*.Tests.dll
    #     resultsFolder: '$(Build.SourcesDirectory)\out\logs\TestResults'
    #     runSettingsFile: '$(Build.SourcesDirectory)\cit.runsettings'
    #     runInParallel: true
    #     codeCoverageEnabled: true
    #     testRunTitle: 'test'
    #     configuration: '$(buildConfiguration)'
    #     publishRunAttachments: true
    #     failOnMinTestsNotRun: true
    #     rerunFailedTests: true

      # - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
      #   clean: false  # whether to fetch clean each time
      #   persistCredentials: true
      # - template: templates/install-dotnet.yaml
      # - template: templates/install-nuget.yaml
      # - template: templates/restore-nuget-packages.yaml
      # - template: templates/install-build-dependencies.yaml
      #   parameters:
      #     packageFeed: $(packageFeed)
      # - task: BatchScript@1
      #   displayName: Windows Build
      #   inputs:
      #     filename: build.cmd
      #     arguments: 'Build' #Add ' incremental' to build incremental-ly
      #   continueOnError: true
      #   condition: eq( variables['Agent.OS'], 'Windows_NT' )
      # - task: CopyFiles@2
      #   displayName: 'Copy Build Output'
      #   inputs:
      #     sourceFolder: Artifacts
      #     contents: '*'
      #     targetFolder: $(Build.ArtifactStagingDirectory)
      #     continueOnError: boolean  # 'true' if future steps should run even if this step fails; defaults to 'false'
      # - script: 'echo 1>&2'
      #   failOnStderr: true
      #   displayName: 'If above is partially succeeded, then fail'
      #   condition: eq(variables['Agent.JobStatus'], 'SucceededWithIssues')

  # - template: templates/azure-pipeline.template.yaml
  #   parameters:
  #     name: 'net_core_tests_windows_2022'
  #     displayName: 'Unit Tests (Windows 2022)'
  #     vmImage: 'windows-2022'
  #     scriptFileName: build.cmd
  #     scriptArgs: RunTests
  #     outputDirectory: 'TestResults' #Add ' incremental' to Run tests incremental-ly
  #     artifactName: 'net_core_tests_windows-$(Build.BuildId)'
  #     packageFeed: $(packageFeed)

  # - template: templates/azure-pipeline.template.yaml
  #   parameters:
  #     name: 'net_core_tests_windows_2019'
  #     displayName: 'Unit Tests (Windows 2019)'
  #     vmImage: 'windows-2019'
  #     scriptFileName: build.cmd
  #     scriptArgs: RunTests #Add ' incremental' to Run tests incremental-ly
  #     outputDirectory: 'TestResults'
  #     artifactName: 'net_core_tests_windows-$(Build.BuildId)'
  #     packageFeed: $(packageFeed)

# - stage: linux
#   displayName: Linux (Ubuntu)
#   dependsOn: []
#   jobs:
#   - template: templates/azure-pipeline.template.yaml
#     parameters:
#       name: 'net_core_tests_ubuntu_20'
#       displayName: 'Unit Tests (Ubuntu-20)'
#       vmImage: 'ubuntu-20.04'
#       scriptFileName: './build.sh'
#       scriptArgs: RunTests #Add ' incremental' to Run tests incremental-ly
#       outputDirectory: 'TestResults'
#       artifactName: 'net_core_tests_ubuntu_16-$(Build.BuildId)'
#       packageFeed: $(packageFeed)

#   - template: templates/azure-pipeline.template.yaml
#     parameters:
#       name: 'net_core_tests_ubuntu_22'
#       displayName: 'Unit Tests (Ubuntu-22)'
#       vmImage: 'ubuntu-22.04'
#       scriptFileName: './build.sh'
#       scriptArgs: RunTests #' incremental' # Run tests incremental-ly
#       outputDirectory: 'TestResults'
#       artifactName: 'net_core_tests_ubuntu_22-$(Build.BuildId)'
#       packageFeed: $(packageFeed)
