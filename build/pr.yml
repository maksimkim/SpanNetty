# Pull request validation for Windows against the `future` and `release/*` branches
# See https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema for reference
trigger:
  branches:
    include:
      - main
      - release/*

pr:
  autoCancel: true # indicates whether additional pushes to a PR should cancel in-progress runs for the same PR. Defaults to true
  branches:
    include:  # branch names which will trigger a build
    - main
    - release/*

name: $(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)

variables:
- template: variables/nuget.yml
- name: configuration
  value: Release


stages:
- stage: linux
  displayName: Linux (Ubuntu)
  dependsOn: []
  jobs:
  # - template: templates/build.yml
  #   parameters:
  #     name: 'net_core_tests_ubuntu_22'
  #     displayName: 'Unit Tests (Ubuntu-22)'
  #     vmImage: 'ubuntu-22.04'
  #     scriptFileName: './build.sh'
  #     scriptArgs: RunTests #' incremental' # Run tests incremental-ly
  #     outputDirectory: 'TestResults'
  #     artifactName: 'net_core_tests_ubuntu_22-$(Build.BuildId)'
  #     packageFeed: $(packageFeed)
  - job: ubuntu_22
    displayName: 'Ubuntu-22'
    timeoutInMinutes: 120
    pool:
      vmImage: 'ubuntu-22.04'
    steps:
      - template: templates/install-dotnet.yaml
      - template: templates/install-nuget.yaml
      - template: templates/restore-nuget-packages.yaml
      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          command: 'build'
          projects: 'DotNetty.sln'
          #msbuildArgs: '/p'
          #platform: 'Any CPU'
          configuration: $(configuration)
          #maximumCpuCount: true
      - task: DotNetCoreCLI@2
        displayName: Test
        inputs:
          command: 'test'
          projects: 'test/DotNetty.Codecs.Http2.Tests/DotNetty.Codecs.Http2.Tests.csproj'
          arguments: '--no-build -c $(configuration)'
          publishTestResults: true
              

      # - task: Bash@3 
      #   displayName: Build (Linux)
      #   inputs:
      #     filePath: ${{ parameters.scriptFileName }}
      #     arguments: ${{ parameters.scriptArgs }}
      #   continueOnError: true
      #   condition: in( variables['Agent.OS'], 'Linux', 'Darwin' )

      # - task: CopyFiles@2
      #   displayName: 'Copy Build Output'
      #   inputs:
      #     sourceFolder: ${{ parameters.outputDirectory }}
      #     contents: '**\*'
      #     targetFolder: $(Build.ArtifactStagingDirectory)
      #     continueOnError: boolean  # 'true' if future steps should run even if this step fails; defaults to 'false'
      # - task: PublishTestResults@2
      #   displayName: 'Publish test results'
      #   inputs:
      #     testRunner: VSTest
      #     testResultsFiles: '**/*.trx' #TestResults folder usually
      #     testRunTitle: ${{ parameters.name }}
      #     mergeTestResults: true
      #     failTaskOnFailedTests: false   